{
  "name": "pdf_generator",
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "path": "generate-invoice",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        752,
        736
      ],
      "id": "9a7b1efd-b888-4aa8-876e-4f67141e7bcc",
      "name": "Webhook",
      "webhookId": "generate-invoice-webhook"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1008,
        992
      ],
      "id": "446e70da-6976-4e00-b555-86ad89e22bd7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "ZjEVOiQjGdb70QFT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get input from previous node\nconst input = $input.first().json;\nconsole.log('Raw input:', JSON.stringify(input, null, 2));\n\nlet data = input.output || input.text || input;\n\n// Function to clean and parse JSON\nfunction parseInvoiceData(input) {\n  // If already an object, return it\n  if (typeof input === 'object' && input !== null && !Array.isArray(input)) {\n    console.log('Input is already an object');\n    return input;\n  }\n  \n  // If it's a string, clean and parse it\n  if (typeof input === 'string') {\n    console.log('Input is a string, parsing...');\n    // Remove markdown code blocks\n    let cleaned = input\n      .replace(/```json\\n?/gi, '')\n      .replace(/```\\n?/g, '')\n      .replace(/\\\\n/g, '\\n')\n      .trim();\n    \n    console.log('Cleaned string:', cleaned.substring(0, 200));\n    \n    try {\n      return JSON.parse(cleaned);\n    } catch (e) {\n      console.log('Direct parse failed, trying to extract JSON');\n      // Try to find JSON object in the string\n      const match = cleaned.match(/\\{[\\s\\S]*\\}/);\n      if (match) {\n        console.log('Found JSON match:', match[0].substring(0, 200));\n        return JSON.parse(match[0]);\n      }\n      throw new Error('Could not parse JSON: ' + e.message);\n    }\n  }\n  \n  throw new Error('Unsupported input type: ' + typeof input);\n}\n\n// Parse the data\nlet invoiceData;\ntry {\n  invoiceData = parseInvoiceData(data);\n  console.log('Successfully parsed invoice data');\n} catch (error) {\n  console.error('Parse error:', error.message);\n  console.error('Failed data:', JSON.stringify(data));\n  throw error;\n}\n\n// Ensure all fields are present with defaults\nconst cleanedData = {\n  receiver_name: invoiceData.receiver_name || 'N/A',\n  receiver_address1: invoiceData.receiver_address1 || 'N/A',\n  receiver_address2: invoiceData.receiver_address2 || 'N/A',\n  latlong: invoiceData.latlong || 'N/A',\n  invoice_no: invoiceData.invoice_no || `INV-${Math.floor(10000 + Math.random() * 90000)}`,\n  date: invoiceData.date || new Date().toLocaleDateString('en-US'),\n  items: invoiceData.items || [],\n  account_no: invoiceData.account_no || 'N/A',\n  account_name: invoiceData.account_name || 'N/A',\n  bnk_name: invoiceData.bnk_name || 'N/A',\n  terms: invoiceData.terms || 'Payment due within 30 days',\n  conditions: invoiceData.conditions || 'Standard terms and conditions apply'\n};\n\n// Validate items array\nif (!Array.isArray(cleanedData.items) || cleanedData.items.length === 0) {\n  console.warn('Warning: No items in invoice');\n}\n\nconsole.log('Final cleaned data:', JSON.stringify(cleanedData, null, 2));\n\nreturn {\n  json: cleanedData\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        736
      ],
      "id": "463282bf-3455-45d4-91d0-dedc943e2b0c",
      "name": "to_json1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.apitemplate.io/v2/create-pdf",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "template_id",
              "value": "a2977b23e032eb24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "78fcNDAxODA6MzczODA6eEdMRTJGa2hJTnBoUUNzSg="
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        736
      ],
      "id": "c5c43625-e4c6-485c-b7a8-7518d7d015ae",
      "name": "Generate PDF1"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1952,
        736
      ],
      "id": "81dd4c9a-1752-4171-9666-ac912c7ee24e",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1120,
        992
      ],
      "id": "29740178-b8c0-4296-874c-669be5dfd629",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.conversation || JSON.stringify($json.body) }}",
        "options": {
          "systemMessage": "=You are an AI assistant that extracts invoice information from customer conversations.\n\nAnalyze the conversation and extract invoice details in this EXACT JSON format:\n\n{\n  \"receiver_name\": \"string\",\n  \"receiver_address1\": \"string\",\n  \"receiver_address2\": \"string\",\n  \"latlong\": \"string\",\n  \"invoice_no\": \"string\",\n  \"date\": \"string\",\n  \"items\": [\n    {\n      \"item_name\": \"string\",\n      \"unit_price\": number,\n      \"unit\": number,\n      \"total\": number\n    }\n  ],\n  \"account_no\": \"string\",\n  \"account_name\": \"string\",\n  \"bnk_name\": \"string\",\n  \"terms\": \"string\",\n  \"conditions\": \"string\"\n}\n\nRules:\n- Generate invoice_no as INV-XXXXX if not provided\n- Use today's date (10/12/2025) if not mentioned\n- Calculate total = unit_price Ã— unit\n- Use \"N/A\" for missing fields\n- Default terms: \"Payment due within 30 days\"\n- Default conditions: \"Standard terms and conditions apply\"\n- Output ONLY the JSON, no explanations"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1056,
        736
      ],
      "id": "9631ac26-0f54-4116-9f74-7998deba727a",
      "name": "AI Agent - pdf_generator"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent - pdf_generator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent - pdf_generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - pdf_generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "to_json1": {
      "main": [
        [
          {
            "node": "Generate PDF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent - pdf_generator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - pdf_generator": {
      "main": [
        [
          {
            "node": "to_json1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "caed102c-d438-4e16-9d16-677d93b6e5cc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7689b2d292c0781d20ceefaa84bdcd9885638f03916f0bd47506d5dc7d5acfe2"
  },
  "id": "KjGyqkxqi9AnJ5ek",
  "tags": []
}